// Three.js –¥–æ–¥–∞—Ç–æ–∫ –¥–ª—è 3D –ª–æ–≥–æ
class Logo3D {
    constructor() {
        this.scene = null;
        this.camera = null;
        this.renderer = null;
        this.logo = null;
        this.mouseX = 0;
        this.mouseY = 0;
        this.targetRotationX = 0;
        this.targetRotationY = 0;
        this.animationId = null;
        this.isModelLoaded = false;
        
        this.init();
    }
    
    init() {
        console.log('üîÑ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è 3D –ª–æ–≥–æ...');
        
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ WebGL
            if (!this.checkWebGLSupport()) {
                this.showWebGLError();
                return;
            }
            
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ Three.js
            if (typeof THREE === 'undefined') {
                console.error('‚ùå Three.js –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
                this.createFallbackDisplay();
                return;
            }
            
            // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ü–µ–Ω–∏
            this.scene = new THREE.Scene();
            this.scene.background = new THREE.Color(0x002366);
            
            // –ö–∞–º–µ—Ä–∞
            this.camera = new THREE.PerspectiveCamera(50, 1, 0.1, 1000);
            this.camera.position.set(0, 0, 6);
            
            // –†–µ–Ω–¥–µ—Ä–µ—Ä
            const container = document.getElementById('logo3d-container');
            if (!container) {
                console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ª–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!');
                this.createFallbackDisplay();
                return;
            }
            
            this.renderer = new THREE.WebGLRenderer({ 
                antialias: true, 
                alpha: true
            });
            
            this.renderer.setSize(container.clientWidth, container.clientHeight);
            this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
            
            container.appendChild(this.renderer.domElement);
            
            // –û—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è
            this.setupLighting();
            
            // –°–ø—Ä–æ–±–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –º–æ–¥–µ–ª—å
            this.loadLogo();
            
            // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
            this.setupEventListeners();
            
            // –ê–Ω—ñ–º–∞—Ü—ñ—è
            this.animate();
            
            console.log('‚úÖ 3D –ª–æ–≥–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
            
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó 3D:', error);
            this.createFallbackLogo();
        }
    }
    
    checkWebGLSupport() {
        try {
            const canvas = document.createElement('canvas');
            const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
            return !!gl;
        } catch (e) {
            return false;
        }
    }
    
    showWebGLError() {
        const container = document.getElementById('logo3d-container');
        if (container) {
            container.innerHTML = `
                <div style="width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; 
                            background: linear-gradient(135deg, #002366, #00308F); border-radius: 20px; color: white;
                            font-family: 'Poppins', sans-serif; text-align: center; padding: 20px;">
                    <div>
                        <h3 style="margin-bottom: 10px; font-size: 1.2rem;">3D Logo</h3>
                        <p style="opacity: 0.8; font-size: 0.9rem; margin-bottom: 15px;">WebGL –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è</p>
                    </div>
                </div>
            `;
        }
    }
    
    setupLighting() {
        // Ambient light
        const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
        this.scene.add(ambientLight);
        
        // Directional light
        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
        directionalLight.position.set(5, 5, 5);
        this.scene.add(directionalLight);
        
        // Fill light
        const fillLight = new THREE.DirectionalLight(0x87CEEB, 0.3);
        fillLight.position.set(-5, -3, 5);
        this.scene.add(fillLight);
    }
    
    loadLogo() {
        // –°–ø—Ä–æ–±–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ GLTFLoader —è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π
        if (typeof THREE.GLTFLoader === 'undefined') {
            console.warn('‚ö†Ô∏è GLTFLoader –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π, —Å—Ç–≤–æ—Ä—é—é –∑–∞–ø–∞—Å–Ω–µ –ª–æ–≥–æ');
            this.createFallbackLogo();
            return;
        }
        
        try {
            const loader = new THREE.GLTFLoader();
            const modelPath = './assets/my_logo.glb';
            
            console.log('üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ:', modelPath);
            
            loader.load(modelPath, 
                // –£—Å–ø—ñ—à–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                (gltf) => {
                    console.log('‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞');
                    
                    this.logo = gltf.scene;
                    this.isModelLoaded = true;
                    
                    // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ
                    this.setupModel();
                    
                    // –¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è –∫–∞–º–µ—Ä–∏
                    this.centerCamera();
                    
                }, 
                // –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                (error) => {
                    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ:', error);
                    this.createFallbackLogo();
                }
            );
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ loadLogo:', error);
            this.createFallbackLogo();
        }
    }
    
    setupModel() {
        this.logo.scale.set(1, 1, 1);
        this.logo.position.set(0, 0, 0);
        this.logo.rotation.set(0, 0, 0);
        
        this.scene.add(this.logo);
    }
    
    centerCamera() {
        if (!this.logo) return;
        
        const box = new THREE.Box3().setFromObject(this.logo);
        const center = box.getCenter(new THREE.Vector3());
        const size = box.getSize(new THREE.Vector3());
        
        const maxDim = Math.max(size.x, size.y, size.z);
        const fov = this.camera.fov * (Math.PI / 180);
        let cameraZ = Math.abs(maxDim / Math.sin(fov / 2));
        
        cameraZ = cameraZ * 1.8;
        this.camera.position.z = cameraZ;
        
        this.camera.lookAt(center);
    }
    
    createFallbackLogo() {
        console.log('üîÑ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–æ...');
        
        // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Å—Ü–µ–Ω–∞ —ñ—Å–Ω—É—î
        if (!this.scene) {
            console.error('‚ùå –°—Ü–µ–Ω–∞ –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞');
            return;
        }
        
        // –ì—Ä—É–ø–∞ –¥–ª—è –∑–∞–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–æ
        const group = new THREE.Group();
        
        // –û—Å–Ω–æ–≤–Ω–∞ –≥–µ–æ–º–µ—Ç—Ä—ñ—è
        const geometry = new THREE.IcosahedronGeometry(2.0, 1);
        const material = new THREE.MeshPhongMaterial({ 
            color: 0x5072A7,
            transparent: true,
            opacity: 0.9,
            shininess: 100
        });
        
        const mainMesh = new THREE.Mesh(geometry, material);
        group.add(mainMesh);
        
        // –ö–æ–Ω—Ç—É—Ä–Ω—ñ –ª—ñ–Ω—ñ—ó
        const edges = new THREE.EdgesGeometry(geometry);
        const lineMaterial = new THREE.LineBasicMaterial({ 
            color: 0x00308F,
            transparent: true,
            opacity: 0.6
        });
        const wireframe = new THREE.LineSegments(edges, lineMaterial);
        group.add(wireframe);
        
        this.logo = group;
        this.scene.add(this.logo);
        
        console.log('‚úÖ –ó–∞–ø–∞—Å–Ω–µ –ª–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ');
    }
    
    createFallbackDisplay() {
        const container = document.getElementById('logo3d-container');
        if (container) {
            container.innerHTML = `
                <div style="width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; 
                            background: linear-gradient(135deg, #002366, #00308F); border-radius: 20px; color: white;
                            font-family: 'Poppins', sans-serif; text-align: center; padding: 20px;">
                    <div>
                        <div style="font-size: 3rem; margin-bottom: 15px;">üé®</div>
                        <h3 style="margin-bottom: 10px; font-size: 1.2rem;">3D Artist</h3>
                        <p style="opacity: 0.8; font-size: 0.9rem;">Blender3D ‚Ä¢ UE5 ‚Ä¢ Clo3D</p>
                    </div>
                </div>
            `;
        }
    }
    
    setupEventListeners() {
        // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –∫—É—Ä—Å–æ—Ä—É
        document.addEventListener('mousemove', (event) => {
            this.mouseX = (event.clientX / window.innerWidth) * 2 - 1;
            this.mouseY = -(event.clientY / window.innerHeight) * 2 + 1;
        });
        
        // –ê–¥–∞–ø—Ç–∞—Ü—ñ—è –¥–æ —Ä–æ–∑–º—ñ—Ä—É –≤—ñ–∫–Ω–∞
        window.addEventListener('resize', () => {
            this.onWindowResize();
        });
    }
    
    onWindowResize() {
        const container = document.getElementById('logo3d-container');
        if (!container || !this.camera || !this.renderer) return;
        
        const width = container.clientWidth;
        const height = container.clientHeight;
        
        this.camera.aspect = width / height;
        this.camera.updateProjectionMatrix();
        this.renderer.setSize(width, height);
    }
    
    animate() {
        this.animationId = requestAnimationFrame(() => this.animate());
        
        try {
            if (this.logo) {
                // –ü–ª–∞–≤–Ω–µ —Å–ª—ñ–¥–∫—É–≤–∞–Ω–Ω—è –∑–∞ –∫—É—Ä—Å–æ—Ä–æ–º
                this.targetRotationY = this.mouseX * 0.5;
                this.targetRotationX = this.mouseY * 0.3;
                
                // –ü–ª–∞–≤–Ω–∞ —ñ–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü—ñ—è
                this.logo.rotation.y += (this.targetRotationY - this.logo.rotation.y) * 0.05;
                this.logo.rotation.x += (this.targetRotationX - this.logo.rotation.x) * 0.05;
                
                // –î–æ–¥–∞—Ç–∫–æ–≤–µ –ø–ª–∞–≤–Ω–µ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è
                this.logo.rotation.y += 0.001;
                
                // –û–±–º–µ–∂–µ–Ω–Ω—è –æ–±–µ—Ä—Ç–∞–Ω–Ω—è
                this.logo.rotation.x = Math.max(-0.8, Math.min(0.8, this.logo.rotation.x));
                this.logo.rotation.y = Math.max(-1.2, Math.min(1.2, this.logo.rotation.y));
            }
            
            this.renderer.render(this.scene, this.camera);
            
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –∞–Ω—ñ–º–∞—Ü—ñ—ó:', error);
        }
    }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener('DOMContentLoaded', () => {
    setTimeout(() => {
        window.threeApp = new Logo3D();
    }, 100);
});
