// Three.js –¥–æ–¥–∞—Ç–æ–∫ –¥–ª—è 3D –ª–æ–≥–æ
class Logo3D {
    constructor() {
        this.scene = null;
        this.camera = null;
        this.renderer = null;
        this.logo = null;
        this.mouseX = 0;
        this.mouseY = 0;
        this.targetRotationX = 0;
        this.targetRotationY = 0;
        this.animationId = null;
        this.isModelLoaded = false;
        
        this.init();
    }
    
    init() {
        console.log('üîÑ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è 3D –ª–æ–≥–æ...');
        
        try {
            // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ WebGL
            if (!this.checkWebGLSupport()) {
                this.showWebGLError();
                return;
            }
            
            // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ü–µ–Ω–∏
            this.scene = new THREE.Scene();
            this.scene.background = new THREE.Color(0x002366);
            this.scene.fog = new THREE.Fog(0x002366, 10, 20);
            
            // –ö–∞–º–µ—Ä–∞
            this.camera = new THREE.PerspectiveCamera(45, 1, 0.1, 1000);
            this.camera.position.set(0, 0, 8);
            
            // –†–µ–Ω–¥–µ—Ä–µ—Ä
            const container = document.getElementById('logo3d-container');
            if (!container) {
                console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ª–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!');
                this.createFallbackDisplay();
                return;
            }
            
            this.renderer = new THREE.WebGLRenderer({ 
                antialias: true, 
                alpha: true,
                powerPreference: "high-performance"
            });
            
            this.renderer.setSize(container.clientWidth, container.clientHeight);
            this.renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));
            this.renderer.shadowMap.enabled = true;
            this.renderer.shadowMap.type = THREE.PCFSoftShadowMap;
            this.renderer.outputColorSpace = THREE.SRGBColorSpace;
            this.renderer.toneMapping = THREE.ACESFilmicToneMapping;
            this.renderer.toneMappingExposure = 1;
            
            container.appendChild(this.renderer.domElement);
            
            // –î–æ–¥–∞–≤–∞–Ω–Ω—è loading —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
            this.showLoadingIndicator();
            
            // –û—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è
            this.setupLighting();
            
            // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ
            this.loadLogo();
            
            // –û–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π
            this.setupEventListeners();
            
            // –ê–Ω—ñ–º–∞—Ü—ñ—è
            this.animate();
            
            console.log('‚úÖ 3D –ª–æ–≥–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
            
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó 3D:', error);
            this.createFallbackLogo();
        }
    }
    
    checkWebGLSupport() {
        try {
            const canvas = document.createElement('canvas');
            const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
            if (!gl) {
                console.warn('‚ö†Ô∏è WebGL –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –±—Ä–∞—É–∑–µ—Ä–æ–º');
                return false;
            }
            return true;
        } catch (e) {
            console.warn('‚ö†Ô∏è WebGL –≤–∏–∫–ª–∏–∫–∞–≤ –ø–æ–º–∏–ª–∫—É:', e);
            return false;
        }
    }
    
    showWebGLError() {
        const container = document.getElementById('logo3d-container');
        if (container) {
            container.innerHTML = `
                <div style="width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; 
                            background: linear-gradient(135deg, #002366, #00308F); border-radius: 20px; color: white;
                            font-family: 'Poppins', sans-serif; text-align: center; padding: 20px;">
                    <div>
                        <h3 style="margin-bottom: 10px; font-size: 1.2rem;">3D Logo</h3>
                        <p style="opacity: 0.8; font-size: 0.9rem; margin-bottom: 15px;">WebGL –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º</p>
                        <p style="opacity: 0.6; font-size: 0.8rem;">–°–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ –±—Ä–∞—É–∑–µ—Ä –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ Chrome/Firefox</p>
                    </div>
                </div>
            `;
        }
    }
    
    showLoadingIndicator() {
        const container = document.getElementById('logo3d-container');
        if (container) {
            const loadingDiv = document.createElement('div');
            loadingDiv.className = 'logo-loading';
            loadingDiv.innerHTML = `
                <div style="text-align: center;">
                    <div style="width: 40px; height: 40px; border: 3px solid transparent; border-top: 3px solid #F0F8FF; 
                                border-radius: 50%; animation: spin 1s linear infinite; margin: 0 auto 15px;"></div>
                    <p style="margin: 0; font-size: 0.9rem; opacity: 0.8;">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è 3D...</p>
                </div>
            `;
            container.appendChild(loadingDiv);
            this.loadingIndicator = loadingDiv;
        }
    }
    
    hideLoadingIndicator() {
        if (this.loadingIndicator) {
            this.loadingIndicator.remove();
            this.loadingIndicator = null;
        }
    }
    
    setupLighting() {
        // Ambient light - –∑–∞–≥–∞–ª—å–Ω–µ –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è
        const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);
        this.scene.add(ambientLight);
        
        // Directional light - –æ—Å–Ω–æ–≤–Ω–∏–º –¥–∂–µ—Ä–µ–ª–æ —Å–≤—ñ—Ç–ª–∞
        const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);
        directionalLight.position.set(5, 5, 5);
        directionalLight.castShadow = true;
        directionalLight.shadow.mapSize.width = 1024;
        directionalLight.shadow.mapSize.height = 1024;
        this.scene.add(directionalLight);
        
        // Fill light - –∑–∞–ø–æ–≤–Ω—é–≤–∞–ª—å–Ω–µ —Å–≤—ñ—Ç–ª–æ
        const fillLight = new THREE.DirectionalLight(0x87CEEB, 0.3);
        fillLight.position.set(-5, -3, 5);
        this.scene.add(fillLight);
        
        // Rim light - –∫–æ–Ω—Ç—É—Ä–Ω–µ —Å–≤—ñ—Ç–ª–æ
        const rimLight = new THREE.DirectionalLight(0x4169E1, 0.4);
        rimLight.position.set(0, 0, -5);
        this.scene.add(rimLight);
        
        // Point light - –¥–æ–¥–∞—Ç–∫–æ–≤–µ —Ç–æ—á–∫–æ–≤–µ —Å–≤—ñ—Ç–ª–æ
        const pointLight = new THREE.PointLight(0x5072A7, 0.5, 20);
        pointLight.position.set(0, 3, 3);
        this.scene.add(pointLight);
    }
    
    loadLogo() {
        const loader = new THREE.GLTFLoader();
        const modelPath = './assets/my_logo.glb';
        
        console.log('üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ:', modelPath);
        
        loader.load(modelPath, 
            // –£—Å–ø—ñ—à–Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            (gltf) => {
                console.log('‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞', gltf);
                this.hideLoadingIndicator();
                
                this.logo = gltf.scene;
                this.isModelLoaded = true;
                
                // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ
                this.setupModel();
                
                // –¶–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è –∫–∞–º–µ—Ä–∏
                this.centerCamera();
                
                // –î–æ–¥–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó
                this.setupModelAnimations(gltf);
                
            }, 
            // –ü—Ä–æ–≥—Ä–µ—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            (progress) => {
                const percent = (progress.loaded / progress.total * 100).toFixed(2);
                console.log(`üìä –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ: ${percent}%`);
                
                // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
                if (this.loadingIndicator) {
                    const percentText = this.loadingIndicator.querySelector('p');
                    if (percentText) {
                        percentText.textContent = `–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è 3D... ${percent}%`;
                    }
                }
            },
            // –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            (error) => {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª—ñ:', error);
                this.hideLoadingIndicator();
                this.createFallbackLogo();
            }
        );
    }
    
    setupModel() {
        // –ú–∞—Å—à—Ç–∞–±—É–≤–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ
        this.logo.scale.set(1, 1, 1);
        this.logo.position.set(0, 0, 0);
        this.logo.rotation.set(0, 0, 0);
        
        // –í–∫–ª—é—á–µ–Ω–Ω—è —Ç—ñ–Ω–µ–π –¥–ª—è –≤—Å—ñ—Ö –º–µ—à—ñ–≤
        this.logo.traverse((child) => {
            if (child.isMesh) {
                child.castShadow = true;
                child.receiveShadow = true;
                
                // –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤
                if (child.material) {
                    child.material.metalness = 0.1;
                    child.material.roughness = 0.5;
                    child.material.envMapIntensity = 1;
                }
            }
        });
        
        this.scene.add(this.logo);
    }
    
    setupModelAnimations(gltf) {
        // –Ø–∫—â–æ –≤ –º–æ–¥–µ–ª—ñ —î –∞–Ω—ñ–º–∞—Ü—ñ—ó, –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —ó—Ö
        if (gltf.animations && gltf.animations.length > 0) {
            console.log('üé¨ –ó–Ω–∞–π–¥–µ–Ω–æ –∞–Ω—ñ–º–∞—Ü—ñ—ó –º–æ–¥–µ–ª—ñ:', gltf.animations.length);
            this.mixer = new THREE.AnimationMixer(this.logo);
            
            gltf.animations.forEach((clip) => {
                const action = this.mixer.clipAction(clip);
                action.play();
            });
        }
    }
    
    centerCamera() {
        if (!this.logo) return;
        
        const box = new THREE.Box3().setFromObject(this.logo);
        const center = box.getCenter(new THREE.Vector3());
        const size = box.getSize(new THREE.Vector3());
        
        const maxDim = Math.max(size.x, size.y, size.z);
        const fov = this.camera.fov * (Math.PI / 180);
        let cameraZ = Math.abs(maxDim / Math.sin(fov / 2));
        
        // –§—ñ–∫—Å–æ–≤–∞–Ω–∏–π –∑—É–º –∑ —Ä–µ–≥—É–ª—é–≤–∞–Ω–Ω—è–º
        cameraZ = cameraZ * 1.8;
        this.camera.position.z = cameraZ;
        
        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞–º–µ—Ä–∏ –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –≤–∏–≥–ª—è–¥—É
        this.camera.lookAt(center);
        
        console.log('üéØ –ö–∞–º–µ—Ä–∞ –≤—ñ–¥—Ü–µ–Ω—Ç—Ä–æ–≤–∞–Ω–∞, –∑—É–º:', cameraZ.toFixed(2));
        console.log('üìê –†–æ–∑–º—ñ—Ä–∏ –º–æ–¥–µ–ª—ñ:', {
            width: size.x.toFixed(2),
            height: size.y.toFixed(2),
            depth: size.z.toFixed(2)
        });
    }
    
    createFallbackLogo() {
        console.log('üîÑ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–æ...');
        
        // –ì—Ä—É–ø–∞ –¥–ª—è –∑–∞–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–æ
        const group = new THREE.Group();
        
        // –û—Å–Ω–æ–≤–Ω–∞ –≥–µ–æ–º–µ—Ç—Ä—ñ—è - —ñ–∫–æ—Å–∞–µ–¥—Ä
        const geometry = new THREE.IcosahedronGeometry(1.5, 2);
        const material = new THREE.MeshPhongMaterial({ 
            color: 0x5072A7,
            transparent: true,
            opacity: 0.9,
            shininess: 100,
            specular: 0x1188ff,
            flatShading: false
        });
        
        const mainMesh = new THREE.Mesh(geometry, material);
        mainMesh.castShadow = true;
        mainMesh.receiveShadow = true;
        group.add(mainMesh);
        
        // –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ–Ω—Ç—É—Ä–Ω–∏—Ö –ª—ñ–Ω—ñ–π
        const edges = new THREE.EdgesGeometry(geometry);
        const lineMaterial = new THREE.LineBasicMaterial({ 
            color: 0x00308F,
            transparent: true,
            opacity: 0.6,
            linewidth: 2
        });
        const wireframe = new THREE.LineSegments(edges, lineMaterial);
        group.add(wireframe);
        
        // –î–æ–¥–∞–≤–∞–Ω–Ω—è —á–∞—Å—Ç–∏–Ω–æ–∫ –Ω–∞–≤–∫–æ–ª–æ
        const particlesGeometry = new THREE.BufferGeometry();
        const particleCount = 50;
        const posArray = new Float32Array(particleCount * 3);
        
        for (let i = 0; i < particleCount * 3; i++) {
            posArray[i] = (Math.random() - 0.5) * 8;
        }
        
        particlesGeometry.setAttribute('position', new THREE.BufferAttribute(posArray, 3));
        
        const particlesMaterial = new THREE.PointsMaterial({
            size: 0.05,
            color: 0x87CEEB,
            transparent: true,
            opacity: 0.6
        });
        
        const particlesMesh = new THREE.Points(particlesGeometry, particlesMaterial);
        group.add(particlesMesh);
        
        this.logo = group;
        this.scene.add(this.logo);
        
        console.log('‚úÖ –ó–∞–ø–∞—Å–Ω–µ –ª–æ–≥–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ');
    }
    
    createFallbackDisplay() {
        const container = document.getElementById('logo3d-container');
        if (container) {
            container.innerHTML = `
                <div style="width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; 
                            background: linear-gradient(135deg, #002366, #00308F); border-radius: 20px; color: white;
                            font-family: 'Poppins', sans-serif; text-align: center; padding: 20px;">
                    <div>
                        <div style="font-size: 3rem; margin-bottom: 15px;">üé®</div>
                        <h3 style="margin-bottom: 10px; font-size: 1.2rem;">3D Artist</h3>
                        <p style="opacity: 0.8; font-size: 0.9rem;">Blender3D ‚Ä¢ UE5 ‚Ä¢ Clo3D</p>
                    </div>
                </div>
            `;
        }
    }
    
    setupEventListeners() {
        // –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó –∫—É—Ä—Å–æ—Ä—É
        document.addEventListener('mousemove', (event) => {
            this.mouseX = (event.clientX / window.innerWidth) * 2 - 1;
            this.mouseY = -(event.clientY / window.innerHeight) * 2 + 1;
        });
        
        // –ê–¥–∞–ø—Ç–∞—Ü—ñ—è –¥–æ —Ä–æ–∑–º—ñ—Ä—É –≤—ñ–∫–Ω–∞
        window.addEventListener('resize', () => {
            this.onWindowResize();
        });
        
        // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ WebGL
        this.renderer.domElement.addEventListener('webglcontextlost', (event) => {
            console.error('üî¥ WebGL context lost');
            event.preventDefault();
            this.handleContextLost();
        }, false);
        
        this.renderer.domElement.addEventListener('webglcontextrestored', () => {
            console.log('üü¢ WebGL context restored');
            this.handleContextRestored();
        }, false);
        
        // Touch events –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤
        document.addEventListener('touchmove', (event) => {
            if (event.touches.length > 0) {
                const touch = event.touches[0];
                this.mouseX = (touch.clientX / window.innerWidth) * 2 - 1;
                this.mouseY = -(touch.clientY / window.innerHeight) * 2 + 1;
                event.preventDefault();
            }
        }, { passive: false });
    }
    
    handleContextLost() {
        // –ó—É–ø–∏–Ω–∏—Ç–∏ –∞–Ω—ñ–º–∞—Ü—ñ—é –ø—Ä–∏ –≤—Ç—Ä–∞—Ç—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        if (this.animationId) {
            cancelAnimationFrame(this.animationId);
            this.animationId = null;
        }
    }
    
    handleContextRestored() {
        // –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–Ω—ñ–º–∞—Ü—ñ—é –ø—Ä–∏ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
        this.animate();
    }
    
    onWindowResize() {
        const container = document.getElementById('logo3d-container');
        if (!container || !this.camera || !this.renderer) return;
        
        const width = container.clientWidth;
        const height = container.clientHeight;
        
        this.camera.aspect = width / height;
        this.camera.updateProjectionMatrix();
        this.renderer.setSize(width, height);
        
        console.log('üîÑ –†–æ–∑–º—ñ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ:', width, 'x', height);
    }
    
    animate() {
        this.animationId = requestAnimationFrame(() => this.animate());
        
        try {
            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∞–Ω—ñ–º–∞—Ü—ñ–π –º–æ–¥–µ–ª—ñ (—è–∫—â–æ —î)
            if (this.mixer) {
                this.mixer.update(0.016); // delta time ~60fps
            }
            
            if (this.logo) {
                // –ü–ª–∞–≤–Ω–µ —Å–ª—ñ–¥–∫—É–≤–∞–Ω–Ω—è –∑–∞ –∫—É—Ä—Å–æ—Ä–æ–º –∑ –æ–±–º–µ–∂–µ–Ω–Ω—è–º
                this.targetRotationY = this.mouseX * 0.5; // ¬±45 –≥—Ä–∞–¥—É—Å—ñ–≤
                this.targetRotationX = this.mouseY * 0.3; // ¬±27 –≥—Ä–∞–¥—É—Å—ñ–≤
                
                // –ü–ª–∞–≤–Ω–∞ —ñ–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü—ñ—è –∑ —Ä—ñ–∑–Ω–∏–º–∏ —à–≤–∏–¥–∫–æ—Å—Ç—è–º–∏ –¥–ª—è –ø—Ä–∏—Ä–æ–¥–Ω–æ–≥–æ —Ä—É—Ö—É
                this.logo.rotation.y += (this.targetRotationY - this.logo.rotation.y) * 0.05;
                this.logo.rotation.x += (this.targetRotationX - this.logo.rotation.x) * 0.05;
                
                // –î–æ–¥–∞—Ç–∫–æ–≤–µ –ø–ª–∞–≤–Ω–µ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è –Ω–∞–≤–∫–æ–ª–æ –æ—Å—ñ Y
                this.logo.rotation.y += 0.001;
                
                // –õ–µ–≥–∫–µ —Ö–∏—Ç–∞–≤–∞–Ω–Ω—è –¥–ª—è –∂–∏–≤–æ—Å—Ç—ñ
                this.logo.position.y = Math.sin(Date.now() * 0.001) * 0.05;
                
                // –û–±–º–µ–∂–µ–Ω–Ω—è –æ–±–µ—Ä—Ç–∞–Ω–Ω—è –¥–ª—è –∑–∞–ø–æ–±—ñ–≥–∞–Ω–Ω—è –µ–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∏—Ö –∫—É—Ç—ñ–≤
                this.logo.rotation.x = Math.max(-0.8, Math.min(0.8, this.logo.rotation.x));
                this.logo.rotation.y = Math.max(-1.2, Math.min(1.2, this.logo.rotation.y));
                this.logo.rotation.z = Math.max(-0.3, Math.min(0.3, this.logo.rotation.z));
            }
            
            // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—Ç–∏–Ω–æ–∫ (—è–∫—â–æ —î)
            if (this.logo && this.isModelLoaded === false) {
                // –ê–Ω—ñ–º–∞—Ü—ñ—è —á–∞—Å—Ç–∏–Ω–æ–∫ –¥–ª—è –∑–∞–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–æ
                this.logo.children.forEach((child, index) => {
                    if (child.isPoints) {
                        child.rotation.y += 0.002;
                        child.rotation.x += 0.001;
                    }
                });
            }
            
            this.renderer.render(this.scene, this.camera);
            
        } catch (error) {
            console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –∞–Ω—ñ–º–∞—Ü—ñ—ó:', error);
            // –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–∏ –∞–Ω—ñ–º–∞—Ü—ñ—é
            if (this.animationId) {
                cancelAnimationFrame(this.animationId);
            }
            setTimeout(() => this.animate(), 1000);
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤
    dispose() {
        if (this.animationId) {
            cancelAnimationFrame(this.animationId);
            this.animationId = null;
        }
        
        if (this.renderer) {
            this.renderer.dispose();
            this.renderer.forceContextLoss();
        }
        
        if (this.scene) {
            this.scene.traverse((object) => {
                if (object.isMesh) {
                    if (object.geometry) {
                        object.geometry.dispose();
                    }
                    if (object.material) {
                        if (Array.isArray(object.material)) {
                            object.material.forEach(material => material.dispose());
                        } else {
                            object.material.dispose();
                        }
                    }
                }
            });
        }
        
        console.log('üßπ –†–µ—Å—É—Ä—Å–∏ 3D –æ—á–∏—â–µ–Ω–æ');
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–µ–±–∞–≥—É
window.debugLogo3D = function() {
    console.log('üîç –î–µ–±–∞–≥ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è 3D –ª–æ–≥–æ:');
    console.log('- WebGL –ø—ñ–¥—Ç—Ä–∏–º–∫–∞:', !!window.WebGLRenderingContext);
    console.log('- –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä:', document.getElementById('logo3d-container'));
    console.log('- Three.js –≤–µ—Ä—Å—ñ—è:', THREE.REVISION);
    console.log('- GLTFLoader –¥–æ—Å—Ç—É–ø–Ω–∏–π:', typeof THREE.GLTFLoader !== 'undefined');
    console.log('- –†–æ–∑–º—ñ—Ä–∏ –≤—ñ–∫–Ω–∞:', window.innerWidth, 'x', window.innerHeight);
    
    const container = document.getElementById('logo3d-container');
    if (container) {
        console.log('- –†–æ–∑–º—ñ—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:', container.clientWidth, 'x', container.clientHeight);
        console.log('- –î—ñ—Ç–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:', container.children.length);
    }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞–Ω—É Three.js
window.getThreeJSInfo = function() {
    if (typeof THREE === 'undefined') {
        console.error('‚ùå Three.js –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ');
        return null;
    }
    
    return {
        version: THREE.REVISION,
        supported: {
            webgl: !!window.WebGLRenderingContext,
            webgl2: !!window.WebGL2RenderingContext
        },
        renderer: window.threeApp?.renderer?.info || '–ù–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ'
    };
};

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ –°—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞, —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è 3D –ª–æ–≥–æ...');
    
    // –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –≥–∞—Ä–∞–Ω—Ç—ñ—ó –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è DOM —Ç–∞ Three.js
    setTimeout(() => {
        if (typeof THREE === 'undefined') {
            console.error('‚ùå Three.js –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Å–∫—Ä–∏–ø—Ç–∏.');
            const container = document.getElementById('logo3d-container');
            if (container) {
                container.innerHTML = `
                    <div style="width: 100%; height: 100%; display: flex; align-items: center; justify-content: center; 
                                background: linear-gradient(135deg, #002366, #00308F); border-radius: 20px; color: white;
                                font-family: 'Poppins', sans-serif; text-align: center; padding: 20px;">
                        <div>
                            <h3 style="margin-bottom: 10px; font-size: 1.2rem;">–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</h3>
                            <p style="opacity: 0.8; font-size: 0.9rem;">Three.js –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ</p>
                        </div>
                    </div>
                `;
            }
            return;
        }
        
        // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è 3D –¥–æ–¥–∞—Ç–∫—É
        window.threeApp = new Logo3D();
        
    }, 100);
});

// –û–±—Ä–æ–±–∫–∞ –≤–∏—Ö–æ–¥—É –∑ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–ª—è –æ—á–∏—â–µ–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤
window.addEventListener('beforeunload', () => {
    if (window.threeApp) {
        window.threeApp.dispose();
    }
});

// –û–±—Ä–æ–±–∫–∞ –ø—Ä–∏—Ö–æ–≤–∞–Ω–æ—Å—Ç—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ (Page Visibility API)
document.addEventListener('visibilitychange', () => {
    if (window.threeApp) {
        if (document.hidden) {
            // –°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∞ - –º–æ–∂–Ω–∞ –∑–º–µ–Ω—à–∏—Ç–∏ —á–∞—Å—Ç–æ—Ç—É –∫–∞–¥—Ä—ñ–≤
            console.log('‚è∏Ô∏è –°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø—Ä–∏—Ö–æ–≤–∞–Ω–∞');
        } else {
            // –°—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–Ω–æ–≤—É –≤–∏–¥–∏–º–∞
            console.log('‚ñ∂Ô∏è –°—Ç–æ—Ä—ñ–Ω–∫–∞ –≤–∏–¥–∏–º–∞');
        }
    }
});

// –î–æ–¥–∞—Ç–∫–æ–≤—ñ —É—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è —Ä–æ–∑—Ä–æ–±–∫–∏
if (process.env.NODE_ENV === 'development') {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –¥–µ–±–∞–≥ –ø—Ä–∏ —Ä–æ–∑—Ä–æ–±—Ü—ñ
    window.addEventListener('load', () => {
        setTimeout(() => {
            debugLogo3D();
        }, 2000);
    });
}
